<div class="wrap">

  <div class="basicHero">
    <h1>Connect to AACT using SAS</h1>

  </div>

</div>

<section class="sasAccess">
  <div class="wrap">
    <p>This method for accessing the AACT database is recommended for SAS users wanting to run analyses or queries using the live database. </p>

    <h3>Note:</h3>
    <ul>
      <li>This method can also be used to create a local SAS copy of a particular instance of the database (a “snapshot”), for example by using PROC COPY as illustrated below in Example 3.e. However this is not recommended if a user has limited internet bandwidth or computational power (e.g., working on PC SAS). Two alternative methods for SAS users wanting to work with a snapshot of the database are available and are recommended. </li>
      <li>For SAS users with SAS/ACCESS interface to PostgreSQL and PostgreSQL software installed on their machine, a snapshot of the database can be downloaded and used to populate a local version of the database. SAS can then be used to connect to, and query, the local database.  See instructions:  “SAS – downloading and connecting to a local copy of the PostgreSQL AACT database”.</li>
      <li>For SAS users without SAS/ACCESS interface to PostgreSQL, the AACT database tables can be downloaded in delimited text file format.  See instructions: “SAS – downloading and working with the delimited text file version of AACT database snapshots”.</li>
    </ul>

    <div class="step">
      <span class="stepNumber">1</span>
      <h3 class="stepName">SAS Installation requirements</h3>
    </div>
    <p>
      SAS software must be installed.  SAS/ACCESS interface to PostgreSQL is required.
    </p>
    <p>
      <b>Note:</b>  These instructions were tested on SAS 9.4 (TS1M2) installed on a PC and on Linux.
    </p>
    <p>
      If the steps described below do not work, the SAS/ACCESS interface to ODBC may need to be configured. For help, contact your SAS administrator, or refer to the <a href="http://support.sas.com/kb/13/848.html">SAS knowledgebase</a>.
    </p>

    <div class="step">
      <span class="stepNumber">2</span>
      <h3 class="stepName">Assign a SAS <i>libref</i> to the PostreSQL database. </h3>
    </div>

    <p>
Using the LIBNAME statement in SAS, assign a <i>libref</i> (a shortcut name) to the PostgreSQL database, and specify the database connection options. The access credentials for the live AACT database are provided at the <a href="/connect">AACT Connect webpage</a>.
    </p>

    <p>
      For example:
    </p>

    <p class='CodeRay'>
      <pre>
      <p class='code'>
        <span class='command-prompt'>libname</span>
        <span class='command-prompt'>   cloud            </span><span class='command-response'> /* my libref  */</span>
        <span class='command-prompt'>   postgres         </span><span class='command-response'> /* postgres engine  */</span>
        <span class='command-prompt'>   user=</span><span>"<%= ENV["RDS_DB_READONLY_USERNAME"] %>"     </span><span class='command-response'> /* supply the AACT2 login credentials  */</span>
        <span class='command-prompt'>   password=</span><span>"<%= ENV["RDS_DB_READONLY_PASSWORD"] %>"</span>
        <span class='command-prompt'>   database=</span><span>"<%= ENV["RDS_DB_READONLY_DBNAME"] %>"</span>
        <span class='command-prompt'>   server=</span><span>"<%= ENV["RDS_DB_HOSTNAME"] %>"</span>
        <span class='command-prompt'>   port=</span><span>5432</span>
        <span class='command-prompt'>   dbmax_text=</span><span>32767 </span><span class='command-response'> /* sets the length of long text variables */</span>
        <span class='command-prompt'>   preserve_tab_names=</span><span>yes</span>
        <span class='command-prompt'>   access=</span><span>readonly</span>
        <span class='command-prompt'>;</span>
      </p>
      </pre>
    </p>

    <p>
      <b>Note:</b> In the PostgreSQL database, character variables are stored either as varchar(n) which is a ‘variable-length’ character type with a maximum limit on length, or as text character type which has unlimited length. SAS only has one type of character variable. For character variables of varchar(n) type, SAS will use the length limit assigned in the PostgreSQL database (default limit is n=255) for the variable. The dbmax_text= option in the libname statement is used to control the length assigned to character variables of text type. The maximum length available in SAS is 32767. Setting dbmax_text=32767 will minimize the risk of truncating information contained within these long variables. However, it may also result in excessively long variables that will increase storage and memory requirements, and reduce computational performance.  When working with a particular dataset, the maximum character variable length may be set for that dataset using the dbmax_text data set option (see example in Step 3, below).
    </p>

    <p>
    Refer to <a href='http://support.sas.com/documentation/cdl/en/acreldb/69039/HTML/default/p0nc2tikruabp6n1008nkdf0buee.htm'>SAS documentation</a> for additional PostgreSQL options and arguments for the LIBNAME statement.
    </p>

    <p>
      If you are working in PC SAS, then after submitting the above LIBNAME statement you will be able to view the available database tables as SAS datasets using the Explorer window.
    </p>

    <%= image_tag("sas_datasets_available.png") %>

    <div class="step">
      <span class="stepNumber">3</span>
      <h3 class="stepName">Use the assigned <i>libref</i> to perform tasks in SAS. </h3>
    </div>

    <p>
    In these examples, the assigned <i>libref</i> is called ‘cloud’.
    </p>

    <h4>Example 3.a - Get listing of contents of the database</h4>

    <p class='CodeRay'>
      <pre>
        <p class='code'>
          <span class='command-prompt'>proc contents data=</span><span>cloud._all_;</span>
          <span class='command-prompt'>run;</span>
        </p>
      </pre>
    </p>

    <h4>Example 3.b - Count number of studies by values of the study_type variable using SAS PROC FREQ</h4>

    <p class='CodeRay'>
      <pre>
        <p class='code'>
          <span class='command-prompt'>title 'Number of studies by type';</span>
          <span class='command-prompt'>proc freq data=</span><span>cloud.studies;</span>
          <span class='command-prompt'>   tables </span><span>study_type;</span>
          <span class='command-prompt'>   run;</span>
          <span class='command-prompt'>title;</span>
      </p>
      </pre>
    </p>

    <h4>Example 3.c – Example SAS PROC SQL queries </h4>

    <p class='CodeRay'>
      <pre>
        <p class='code'>
          <span class='command-response'>* - count number of records in STUDIES table;</span>
          <span class='command-response'>* - count number of records by STUDY_TYPE;</span>
          <span class='command-prompt'>proc sql;</span>
          <span class='command-prompt'>   title 'Number of studies';</span>
          <span class='command-entry'>      select count(*) from cloud.studies;</span>
          <span class='command-prompt'>   title 'Number of studies by type';</span>
          <span class='command-entry'>      select study_type, count(*) as Count</span>
          <span class='command-entry'>         from cloud.studies</span>
          <span class='command-entry'>         group by study_type;</span>
          <span class='command-prompt'>quit;</span>
          <span class='command-prompt'>title;</span>
        </p>
      </pre>
    </p>

    <h4>Example 3.d – Use SAS DATA step to extract and save content as a permanent SAS dataset </h4>

    <p class='CodeRay'>
      <pre>
        <p class='code'>
          <span class='command-response'>* !!!  WARNING - this may take a long time !!!;</span>
          <span class='command-response'>* Consider extracting just a subset of records (e.g., 1000) first;</span>
          <span class='command-response'>* In the example below, the maximum length for character variables stored as ‘text’ type in the postgreSQL database is set at 1000;</span>

          <span class='command-prompt'>libname sasdata </span><span> "&lt;my file path&gt;" </span><span class='command-prompt'> ;</span><span class='command-response'>  /* folder for storing dataset */</span>

          <span class='command-prompt'>data sasdata.studies;</span>
          <span class='command-prompt'>   set cloud.studies </span>
          <span class='command-prompt'>      (dbmax_text=</span><span>1000</span><span class='command-prompt'> obs=</span><span>1000);</span>
          <span class='command-prompt'>   run;</span>
        </p>
      </pre>
    </p>

    <p>
      Running this code in SAS will save a SAS dataset called ‘studies.sas7bdat’ in the file path specified by the libname sasdata …  statement. This dataset will contain only the first 1000 records (obs=1000 argument) from the studies table in the live database.
    </p>

    <h4>Example 3.e – Use SAS PROC COPY to extract and save several tables as permanent SAS datasets</h4>

    <p class='CodeRay'>
      <pre>
        <p class='code'>
          <span class='command-response'>* !!! WARNING – this may take a long time !!!;</span>
          <span class='command-response'>*  For example, the following code took >2.5 h to run on PC SAS;</span>
          <span class='command-response'>*    over a home internet connection;</span>
          <span class='command-prompt'>proc copy</span>
          <span class='command-prompt'>   in = </span><span>cloud</span>
          <span class='command-prompt'>   out = </span><span>sasdata</span>
          <span class='command-prompt'>   ;</span>
          <span class='command-entry'>   select studies  sponsors ; </span><span class='command-response'> /* select a subset of database tables */</span>
          <span class='command-prompt'>   run;</span>
        </p>
      </pre>
    </p>

    <p>
      Running this code in SAS will save two SAS datasets, one called ‘studies.sas7bdat’ and the second called ‘sponsors.sas7bdat’. These will be saved in the file path specified by the libname sasdata …  statement.
    </p>


    <div class="step">
      <span class="stepNumber">4</span>
      <h3 class="stepName">Alternative connection method using SAS PROC SQL Pass-Through </h3>
    </div>

    <p>For SAS users intending to use SAS PROC SQL to connect to and query the live AACT database, the following method may be used in place of the methods described in Step 2 and Step 3.</p>

    <p>In general, the connection method described in Step 2 above that uses a SAS/ACCESS LIBNAME statement with postgres engine name for the PostgreSQL interface is recommended. However, in some situations, connection using the PROC SQL Pass-Through Facility may be needed.  For a description of advantages and disadvantages of the two approaches, refer to <a href="http://support.sas.com/documentation/cdl/en/acreldb/69039/HTML/default/p1hadwfhakpxh3n1i4qvd9f09jqp.htm" target="_blank">this information provided by SAS</a>.</p>

    <p>The following example illustrates use of the Pass-Through Facility in SAS PROC SQL. The connect to statement establishes the connection to the live PostgreSQL database and provides the database access credentials; the disconnect from statement closes the connection. This first ‘select’ query returns the total count of studies in the database; the second ‘select’ query counts the number of studies by values of the study_type variable.    </p>


    <p class='CodeRay'>
      <pre>
        <p class='code'>
          <span>proc sql;</span>
          <span class='command-prompt'>   connect to postgres as aact (</span>
          <span class='command-prompt'>      user=</span><span>"<%= ENV["RDS_DB_READONLY_USERNAME"] %>"</span>
          <span class='command-prompt'>      password=</span><span>"<%= ENV["RDS_DB_READONLY_PASSWORD"] %>"</span>
          <span class='command-prompt'>      database=</span><span>"<%= ENV["RDS_DB_READONLY_DBNAME"] %>"</span>
          <span class='command-prompt'>      server=</span><span>"<%= ENV["RDS_DB_HOSTNAME"] %>"</span>
          <span class='command-prompt'>      port=</span><span>5432</span>
          <span class='command-prompt'>      );</span>
          <span class='command-prompt'>   title 'Number of studies'; </span>
          <span class='command-entry'>      select count(*) from connection to aact </span>
          <span class='command-entry'>         (select nct_id from studies);</span>
          <span class='command-prompt'>   title 'Number of studies by type'; </span>
          <span class='command-entry'>      select study_type, count(*) as Count</span>
          <span class='command-entry'>         from connection to aact </span>
          <span class='command-entry'>            (select study_type from studies)</span>
          <span class='command-entry'>         group by study_type;</span>
          <span class='command-prompt'>   disconnect from aact;</span>
          <span class='command-prompt'>quit;</span>
          <span class='command-prompt'>title;</span>
        </p>
      </pre>
    </p>

    <h2>Credentials</h2>
    <p>You will need the following information to access the database directly in the cloud.</p>
    <%= render 'access/credentials' %>

  </div>
</section>
